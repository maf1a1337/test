import csv
import io
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from database import (
    delete_box, 
    get_box_participants, 
    remove_participant, 
    create_santa_pairs,
    is_box_owner,
    get_user_info,
    get_box_info
)

WAITING_FOR_NOTIFICATION_TEXT = "WAITING_FOR_NOTIFICATION_TEXT"
MANAGE_BOX = 'MANAGE_BOX'
EDIT_BOX = 'EDIT_BOX'

async def show_box_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–±–∫–æ–π"""
    id_box = context.user_data.get('current_box_id')
    box_info = await get_box_info(id_box)
    
    keyboard = [
        [KeyboardButton("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")],
        [KeyboardButton("–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")],
        [KeyboardButton("–ü—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É")],
        [KeyboardButton("–£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")],
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É")],
        [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    message_text = (
        "üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–æ–±–∫–µ</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {box_info['box_name']}\n"
        f"<b>ID:</b> <code>{box_info['id_box']}</code>\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{box_info['box_desc']}</blockquote>\n\n"
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if update.callback_query:
        await update.callback_query.message.reply_text(
            message_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            message_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    return MANAGE_BOX

async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        ['–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É'],
        ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ'],
        ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üéÑ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Secret Santa</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "üì¶ <b>–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É</b> - –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏\n"
        "üéÅ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ</b> - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –æ–±–º–µ–Ω–µ\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∫–æ—Ä–æ–±–∫–∞–º–∏",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    id_box = context.user_data.get('current_box_id')
    participants = await get_box_participants(id_box)
    
    if not participants:
        await update.message.reply_text("–í –∫–æ—Ä–æ–±–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    message = "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for user_id, username in participants:
        message += f"- {username}\n"
    
    await update.message.reply_text(message)

async def download_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ CSV"""
    id_box = context.user_data.get('current_box_id')
    participants = await get_box_participants(id_box)
    
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['ID', 'Username'])
    writer.writerows(participants)
    
    output.seek(0)
    await update.message.reply_document(
        document=io.BytesIO(output.getvalue().encode()),
        filename='participants.csv'
    )

async def start_santa_draw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É"""
    user_id = update.effective_user.id
    id_box = context.user_data.get('current_box_id')
    
    if not id_box:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    if not await is_box_owner(user_id, id_box):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏")
        return
    
    pairs = await create_santa_pairs(id_box)
    
    if not pairs:
        await update.message.reply_text(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2)"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    for santa_id, recipient_id in pairs:
        recipient = await get_user_info(recipient_id)
        try:
            await context.bot.send_message(
                chat_id=santa_id,
                text=f"üéÖ –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n\n"
                     f"–í—ã —Å—Ç–∞–ª–∏ –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –¥–ª—è {recipient['username']}!"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {santa_id}: {e}")
    
    await update.message.reply_text("‚ú® –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

async def notify_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    user_id = update.effective_user.id
    id_box = context.user_data.get('current_box_id')
    
    if not await is_box_owner(user_id, id_box):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    return "WAITING_FOR_NOTIFICATION_TEXT"

async def send_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    message_text = update.message.text
    id_box = context.user_data.get('current_box_id')
    participants = await get_box_participants(id_box)
    
    for user_id, _ in participants:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!")
    return ConversationHandler.END 

async def delete_box_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏"""
    user_id = update.effective_user.id
    id_box = context.user_data.get('current_box_id')
    
    if not id_box:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return await return_to_main_menu(update, context)
    
    if not await is_box_owner(user_id, id_box):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ—Ä–æ–±–∫–∏")
        return await return_to_main_menu(update, context)
    
    await delete_box(id_box)
    context.user_data.pop('current_box_id', None)  # –£–¥–∞–ª—è–µ–º ID –∫–æ—Ä–æ–±–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    await update.message.reply_text(
        "–ö–æ—Ä–æ–±–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=ReplyKeyboardMarkup([
            ['–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É'],
            ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ'],
            ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ], resize_keyboard=True)
    )
    return ConversationHandler.END 

async def handle_box_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–±–∫–æ–π"""
    query = update.callback_query
    await query.answer()
    
    box_id = query.data.split('_')[-1]
    context.user_data['current_box_id'] = int(box_id)
    
    return await show_box_menu(update, context)