from database import add_box
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from .box_management_handler import (
    show_box_menu,
    return_to_main_menu,
    show_participants,
    download_participants,
    start_santa_draw,
    notify_participants,
    send_notification
)
import os
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
NAME, PHOTO, DESCRIPTION = range(3)
WAITING_FOR_NOTIFICATION_TEXT = "WAITING_FOR_NOTIFICATION_TEXT"

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
PHOTO_DIR = "photo_box"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)

async def create_box(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏"""
    user = update.effective_user
    
    if not user.username:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n"
            "<b>–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)\n"
            "4. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ username –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            parse_mode='HTML'
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ—Ä–æ–±–∫–∏*\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏!\n\n"
        "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏:",
        parse_mode='Markdown'
    )
    return NAME

async def get_box_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏"""
    box_name = update.message.text
    if len(box_name) > 100:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞:* –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 100 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(box_name)} —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode='Markdown'
        )
        return NAME
    
    context.user_data['box_name'] = box_name
    await update.message.reply_text(
        "üì∏ *–û—Ç–ª–∏—á–Ω–æ!* –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–π –∫–æ—Ä–æ–±–∫–∏\n"
        "(–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥)",
        parse_mode='Markdown'
    )
    return PHOTO

async def get_box_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∫–æ—Ä–æ–±–∫–∏"""
    photo_file = await update.message.photo[-1].get_file()
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è timestamp
    file_name = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{update.effective_user.id}.jpg"
    file_path = os.path.join(PHOTO_DIR, file_name)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    await photo_file.download_to_drive(file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['box_photo'] = file_path
    
    await update.message.reply_text(
        "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏:"
    )
    return DESCRIPTION

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    context.user_data['box_photo'] = None
    await update.message.reply_text(
        "üìù *–•–æ—Ä–æ—à–æ!* –§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏:\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
        parse_mode='Markdown'
    )
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏"""
    description = update.message.text
    
    if len(description) > 200:
        await update.message.reply_text(
            "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return DESCRIPTION
    
    context.user_data['box_description'] = description
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º id —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
    box_id = await add_box(
        user_id=user_id,
        box_name=context.user_data['box_name'],
        box_photo=context.user_data['box_photo'],
        box_desc=context.user_data['box_description']
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∫–æ—Ä–æ–±–∫–∏ –≤ context.user_data
    context.user_data['current_box_id'] = box_id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–±–∫–æ–π
    keyboard = [
        ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'],
        ['–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞'],
        ['–ü—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É', '–£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'],
        ['–£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É', '–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    if context.user_data['box_photo'] and os.path.exists(context.user_data['box_photo']):
        with open(context.user_data['box_photo'], 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=(
                    "‚úÖ <b>–ö–æ—Ä–æ–±–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                    f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {context.user_data['box_name']}\n"
                    f"<b>ID –∫–æ—Ä–æ–±–∫–∏:</b> <code>{box_id}</code>\n"
                    f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{context.user_data['box_description']}</blockquote>\n\n"
                    "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                ),
                parse_mode='HTML',
                reply_markup=reply_markup
            )
    else:
        await update.message.reply_text(
            "‚úÖ <b>–ö–æ—Ä–æ–±–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {context.user_data['box_name']}\n"
            f"<b>ID –∫–æ—Ä–æ–±–∫–∏:</b> <code>{box_id}</code>\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{context.user_data['box_description']}</blockquote>\n\n"
            "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    return ConversationHandler.END

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
box_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É$'), create_box)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_box_name)],
        PHOTO: [
            MessageHandler(filters.PHOTO, get_box_photo),
            CommandHandler('skip', skip_photo)
        ],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
    },
    fallbacks=[]
)

box_management_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–æ–π$'), show_box_menu)],
    states={
        WAITING_FOR_NOTIFICATION_TEXT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, send_notification)
        ],
    },
    fallbacks=[
        MessageHandler(filters.Regex('^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$'), return_to_main_menu),
        MessageHandler(filters.Regex('^–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$'), show_participants),
        MessageHandler(filters.Regex('^–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$'), download_participants),
        MessageHandler(filters.Regex('^–ü—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É$'), start_santa_draw),
        MessageHandler(filters.Regex('^–£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$'), notify_participants),
    ]
)