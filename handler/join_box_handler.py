from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from database import add_participant, get_box_info, is_participant, update_participant_info, remove_participant, get_participant_info
import os
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ—Ä–æ–±–∫–µ
(ENTER_BOX_ID, ENTER_NAME, ENTER_ADDRESS, ENTER_WISH, MENU) = range(5)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞—á–∏–Ω–∞–µ–º —Å 10 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
(EDIT_NAME, EDIT_ADDRESS, EDIT_WISH) = range(10, 13)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str = None):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        ['–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É'],
        ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ'],
        ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.clear()
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–± –æ—à–∏–±–∫–µ), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if message:
        await update.message.reply_text(
            message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    else:
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "üéÑ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Secret Santa</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "üì¶ <b>–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É</b> - –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏\n"
            "üéÅ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ</b> - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –æ–±–º–µ–Ω–µ\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∫–æ—Ä–æ–±–∫–∞–º–∏",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    return ConversationHandler.END

async def join_box(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ—Ä–æ–±–∫–µ"""
    user = update.effective_user
    
    if not user.username:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ–±–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n"
            "<b>–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)\n"
            "4. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ username –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            parse_mode='HTML'
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üéÑ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ—Ä–æ–±–∫–µ</b>\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ–±–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ ID –∫–æ—Ä–æ–±–∫–∏,\n"
        "–∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove()
    )
    return ENTER_BOX_ID

async def process_box_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∫–æ—Ä–æ–±–∫–∏"""
    try:
        box_id = int(update.message.text)
        box_info = await get_box_info(box_id)
        
        if not box_info:
            await update.message.reply_text(
                "‚ùå –ö–æ—Ä–æ–±–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTER_BOX_ID
        
        user_id = update.effective_user.id
        participant_exists = await is_participant(user_id, box_id)
        
        if participant_exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return await show_main_menu(
                update, 
                context, 
                "‚ùå <b>–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ—Ä–æ–±–∫–∏!</b>"
            )
        
        context.user_data['joining_box_id'] = box_id
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        return ENTER_NAME
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ—Ä–æ–±–∫–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        return ENTER_BOX_ID

async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    name = update.message.text
    context.user_data['participant_name'] = name
    
    await update.message.reply_text(
        "üìç *–û—Ç–ª–∏—á–Ω–æ!*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞:\n"
        "‚Ä¢ –ì–æ—Ä–æ–¥\n"
        "‚Ä¢ –£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n"
        "‚Ä¢ –ò–Ω–¥–µ–∫—Å\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)",
        parse_mode='Markdown'
    )
    return ENTER_ADDRESS

async def process_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    address = update.message.text
    context.user_data['participant_address'] = address
    
    await update.message.reply_text(
        "üéÅ *–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!*\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –¥–ª—è –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã:\n"
        "‚Ä¢ –ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?\n"
        "‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ö–æ–±–±–∏?\n"
        "‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤–∞–º —Ç–æ—á–Ω–æ –Ω–µ —Å—Ç–æ–∏—Ç –¥–∞—Ä–∏—Ç—å?",
        parse_mode='Markdown'
    )
    return ENTER_WISH

async def process_wish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        wish = update.message.text
        user_id = update.effective_user.id
        box_id = context.user_data.get('joining_box_id')
        name = context.user_data.get('participant_name')
        address = context.user_data.get('participant_address')

        if not all([box_id, name, address]):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return ConversationHandler.END

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_participant(
            user_id=user_id,
            name=name,
            address=address,
            box_id=box_id,
            wish=wish
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
        keyboard = [
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–µ
        box_info = await get_box_info(box_id)
        
        if box_info['box_photo'] and os.path.exists(box_info['box_photo']):
            with open(box_info['box_photo'], 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=(
                        "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ—Ä–æ–±–∫–µ!</b>\n\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏:</b> {box_info['box_name']}\n"
                        f"<b>ID –∫–æ—Ä–æ–±–∫–∏:</b> <code>{box_info['id_box']}</code>\n"
                        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{box_info['box_desc']}</blockquote>\n\n"
                        "üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                        f"<b>–ò–º—è:</b> {name}\n"
                        f"<b>–ê–¥—Ä–µ—Å:</b> {address}\n"
                        f"<b>–ü–æ–∂–µ–ª–∞–Ω–∏–µ:</b>\n<blockquote>{wish}</blockquote>\n\n"
                        "‚úèÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                    ),
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text(
                "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ—Ä–æ–±–∫–µ!</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏:</b> {box_info['box_name']}\n"
                f"<b>ID –∫–æ—Ä–æ–±–∫–∏:</b> <code>{box_info['id_box']}</code>\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{box_info['box_desc']}</blockquote>\n\n"
                "üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                f"<b>–ò–º—è:</b> {name}\n"
                f"<b>–ê–¥—Ä–µ—Å:</b> {address}\n"
                f"<b>–ü–æ–∂–µ–ª–∞–Ω–∏–µ:</b>\n<blockquote>{wish}</blockquote>\n\n"
                "‚úèÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        
        return MENU

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±ÔøΩÔøΩ–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def show_participant_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, box_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    box_info = await get_box_info(box_id)
    user_info = await get_participant_info(user_id, box_id)
    
    if not box_info or not user_info:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'],
        ['–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'],
        ['–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ'],
        ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–æ–±–∫–µ', '–û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéÑ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–∏–∏</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏:</b> {box_info['box_name']}\n"
        f"<b>ID –∫–æ—Ä–æ–±–∫–∏:</b> <code>{box_info['id_box']}</code>\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{box_info['box_desc']}</blockquote>\n\n"
        "üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"<b>–ò–º—è:</b> {user_info['user_name']}\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {user_info['user_adds']}\n"
        f"<b>–ü–æ–∂–µ–ª–∞–Ω–∏–µ:</b>\n<blockquote>{user_info['user_wish']}</blockquote>\n\n"
        "‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üë§ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        parse_mode='HTML'
    )
    return EDIT_NAME

async def edit_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üìç <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:",
        parse_mode='HTML'
    )
    return EDIT_ADDRESS

async def edit_wish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üéÅ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ:",
        parse_mode='HTML'
    )
    return EDIT_WISH

async def process_edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
    new_name = update.message.text
    user_id = update.effective_user.id
    box_id = context.user_data.get('current_box_id')
    
    if not box_id:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    await update_participant_info(user_id, box_id, 'user_name', new_name)
    await show_participant_menu(update, context, box_id)
    return MENU

async def process_edit_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    new_address = update.message.text
    user_id = update.effective_user.id
    box_id = context.user_data.get('current_box_id')
    
    if not box_id:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    await update_participant_info(user_id, box_id, 'user_adds', new_address)
    await show_participant_menu(update, context, box_id)
    return MENU

async def process_edit_wish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è"""
    new_wish = update.message.text
    user_id = update.effective_user.id
    box_id = context.user_data.get('current_box_id')
    
    if not box_id:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    await update_participant_info(user_id, box_id, 'user_wish', new_wish)
    await show_participant_menu(update, context, box_id)
    return MENU

async def show_box_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–µ"""
    box_id = context.user_data.get('current_box_id')
    if not box_id:
        return await show_main_menu(
            update, 
            context, 
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–æ–±–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–µ
        box_info = await get_box_info(box_id)
        user_info = await get_participant_info(update.effective_user.id, box_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if box_info['box_photo'] and os.path.exists(box_info['box_photo']):
            with open(box_info['box_photo'], 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=(
                        f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–æ–±–∫–µ:\n"
                        f"ID –∫–æ—Ä–æ–±–∫–∏: {box_info['id_box']}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {box_info['box_name']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {box_info['box_desc']}\n\n"
                        f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–æ–±–∫–µ:\n"
                        f"–ò–º—è: {user_info['user_name']}\n"
                        f"–ê–¥—Ä–µ—Å: {user_info['user_adds']}\n"
                        f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {user_info['user_wish']}"
                    )
                )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(
                f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–æ–±–∫–µ:\n"
                f"ID –∫–æ—Ä–æ–±–∫–∏: {box_info['id_box']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {box_info['box_name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {box_info['box_desc']}\n\n"
                f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–æ–±–∫–µ:\n"
                f"–ò–º—è: {user_info['user_name']}\n"
                f"–ê–¥—Ä–µ—Å: {user_info['user_adds']}\n"
                f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {user_info['user_wish']}"
            )
        return MENU
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–æ–±–∫–µ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return MENU

async def cancel_participation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    box_id = context.user_data.get('current_box_id')
    
    if not box_id:
        return await show_main_menu(
            update, 
            context, 
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É"
        )
    
    await remove_participant(user_id, box_id)
    return await show_main_menu(
        update, 
        context, 
        "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ—Ä–æ–±–∫–µ</b>"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    return await show_main_menu(
        update, 
        context, 
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )

async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return await show_main_menu(update, context) 