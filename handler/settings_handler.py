from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import (
    get_box_info, 
    get_participant_info, 
    get_participating_boxes,  # –ó–∞–º–µ–Ω—è–µ–º get_user_boxes
    get_created_boxes,
    is_participant
)
import os
from handler.join_box_handler import MENU  # –î–æ–±–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è MENU
from handler.box_management_handler import show_box_menu  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ —Å –¥—Ä—É–≥–∏–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str = None, is_callback: bool = False):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        ['–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É'],
        ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ'],
        ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.clear()
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if not message:
        message = (
            "üéÑ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Secret Santa</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "üì¶ <b>–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É</b> - –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏\n"
            "üéÅ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ</b> - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –æ–±–º–µ–Ω–µ\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∫–æ—Ä–æ–±–∫–∞–º–∏"
        )
    
    if is_callback:
        await update.callback_query.message.reply_text(
            message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    return ConversationHandler.END

async def show_participating_boxes(update: Update, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–æ–±–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç"""
    participant_boxes = await get_participating_boxes(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    
    if participant_boxes:
        await update.message.reply_text(
            "üéÅ <b>–ö–æ—Ä–æ–±–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ:</b>",
            parse_mode='HTML'
        )
        
        for box in participant_boxes:
            keyboard = [[InlineKeyboardButton(
                "üë§ –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                callback_data=f"participant_box_{box['id_box']}"
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üì¶ <b>{box['box_name']}</b>\n"
                f"üî¢ ID: <code>{box['id_box']}</code>",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
    return bool(participant_boxes)

async def show_created_boxes(update: Update, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–æ–±–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    created_boxes = await get_created_boxes(user_id)
    
    if created_boxes:
        await update.message.reply_text(
            "\nüëë <b>–ö–æ—Ä–æ–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏:</b>",
            parse_mode='HTML'
        )
        
        for box in created_boxes:
            keyboard = [[InlineKeyboardButton(
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                callback_data=f"manage_box_{box['id_box']}"
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üì¶ <b>{box['box_name']}</b>\n"
                f"üî¢ ID: <code>{box['id_box']}</code>",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
    return bool(created_boxes)

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    
    user_id = update.effective_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–æ–±–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å
    has_participating = await show_participating_boxes(update, user_id)
    has_created = await show_created_boxes(update, user_id)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
    if not has_participating and not has_created:
        return await show_main_menu(
            update,
            context,
            "‚ùå <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫</b>"
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    return ConversationHandler.END

async def handle_box_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith("participant_box_"):
        box_id = int(data.split('_')[-1])
        context.user_data['current_box_id'] = box_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–µ
        box_info = await get_box_info(box_id)
        
        if not box_info:
            return await show_main_menu(
                update,
                context,
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–µ",
                is_callback=True
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
        keyboard = [
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'],
            ['–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'],
            ['–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ'],
            ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–æ–±–∫–µ', '–û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        user_info = await get_participant_info(update.effective_user.id, box_id)
        
        if not user_info:
            return await show_main_menu(
                update,
                context,
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ",
                is_callback=True
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await query.message.reply_text(
            "üéÑ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–∏–∏</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏:</b> {box_info['box_name']}\n"
            f"<b>ID –∫–æ—Ä–æ–±–∫–∏:</b> <code>{box_info['id_box']}</code>\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{box_info['box_desc']}</blockquote>\n\n"
            "üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"<b>–ò–º—è:</b> {user_info['user_name']}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> {user_info['user_adds']}\n"
            f"<b>–ü–æ–∂–µ–ª–∞–Ω–∏–µ:</b>\n<blockquote>{user_info['user_wish']}</blockquote>\n\n"
            "‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return MENU
    
    elif data.startswith("manage_box_"):
        box_id = int(data.split('_')[-1])
        context.user_data['current_box_id'] = box_id
        return await show_box_menu(update, context)